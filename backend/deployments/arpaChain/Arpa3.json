{
  "address": "0x2AD9AA95B2D586f40A90a3a53334EDc927288c0f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "AddPrivilege",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_firstname",
          "type": "string"
        }
      ],
      "name": "AddProfil",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_indexp",
          "type": "uint256"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_session",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adresse",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nbVote",
          "type": "uint256"
        }
      ],
      "name": "GetWinnerSession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "GetWinnerToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_session",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adresse",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "motivation",
          "type": "string"
        }
      ],
      "name": "HistoricVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "addPrivilege",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addPrivilegePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountpriv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveArpacoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arpa3Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_indexp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyPrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArpaTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceSC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyBalanceDep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "winnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "privilegeID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "descprivi",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamprivi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountprivi",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "consoprivi",
              "type": "bool"
            }
          ],
          "internalType": "struct Arpa3.Orders[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrivilege",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "idP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbVote",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Arpa3.Privilege[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addresse",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "firstname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "service",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbvote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Arpa3.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addresse",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "firstname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "service",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbvote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Arpa3.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAccountExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "moderatePrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ordersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "privilegeID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "descprivi",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamprivi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountprivi",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "consoprivi",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "addresse",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "firstname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "service",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nbvote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setAmountPrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setConsoOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_firstname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_service",
          "type": "string"
        }
      ],
      "name": "setProfilAndProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_motivation",
          "type": "string"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Arpa3.WorkflowStatus",
          "name": "_step",
          "type": "uint8"
        }
      ],
      "name": "setWorkflowstatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVoteSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopVoteSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "firstname",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nbVotePrivilege",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasvoted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingSessionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowstatus",
      "outputs": [
        {
          "internalType": "enum Arpa3.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbcf01d5d3846b89eaf03689d5d72ac5cfa6b3044871bd1294726e7958c438f29",
  "receipt": {
    "to": null,
    "from": "0x56f7666571A0F1abD1A8D19C4cd6Fc1b263BeBc2",
    "contractAddress": "0x2AD9AA95B2D586f40A90a3a53334EDc927288c0f",
    "transactionIndex": 0,
    "gasUsed": "5433512",
    "logsBloom": "0x
    "blockHash": "0x1a860d42d1f4ffa8f35f598f2c4fa21a23d736ce0b473ade17bac9444072420d",
    "transactionHash": "0xbcf01d5d3846b89eaf03689d5d72ac5cfa6b3044871bd1294726e7958c438f29",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 132313,
        "transactionHash": "0xbcf01d5d3846b89eaf03689d5d72ac5cfa6b3044871bd1294726e7958c438f29",
        "address": "0x2AD9AA95B2D586f40A90a3a53334EDc927288c0f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056f7666571a0f1abd1a8d19c4cd6fc1b263bebc2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1a860d42d1f4ffa8f35f598f2c4fa21a23d736ce0b473ade17bac9444072420d"
      }
    ],
    "blockNumber": 132313,
    "cumulativeGasUsed": "5433512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67b01552eEACc87FA0AA0C2dc4285735A48DD326"
  ],
  "numDeployments": 2,
  "solcInputHash": "d8dbfda236830f810286ffe041742ad7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"AddPrivilege\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_firstname\",\"type\":\"string\"}],\"name\":\"AddProfil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_indexp\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_session\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adresse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nbVote\",\"type\":\"uint256\"}],\"name\":\"GetWinnerSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"GetWinnerToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_session\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adresse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"motivation\",\"type\":\"string\"}],\"name\":\"HistoricVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addPrivilege\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPrivilegePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountpriv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveArpacoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arpa3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArpaTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalanceDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"privilegeID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"descprivi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamprivi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountprivi\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"consoprivi\",\"type\":\"bool\"}],\"internalType\":\"struct Arpa3.Orders[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivilege\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbVote\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Arpa3.Privilege[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"internalType\":\"struct Arpa3.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"internalType\":\"struct Arpa3.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAccountExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"moderatePrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"privilegeID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"descprivi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamprivi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountprivi\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"consoprivi\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmountPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setConsoOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_service\",\"type\":\"string\"}],\"name\":\"setProfilAndProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_motivation\",\"type\":\"string\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Arpa3.WorkflowStatus\",\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"setWorkflowstatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoteSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVoteSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbVotePrivilege\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasvoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingSessionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowstatus\",\"outputs\":[{\"internalType\":\"enum Arpa3.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPrivilegePrice(uint256,uint256)\":{\"details\":\"send Token to winner\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stopVoteSession()\":{\"details\":\"Reinit du compteur de vote en cours pour la session (number)MinimumVote to send token at vote session stop\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPrivilegePrice(uint256,uint256)\":{\"notice\":\"Display the winner and clean data for next session\"},\"isAccountExist(address)\":{\"notice\":\"Check if user is recorded on chain / Address and Proposal \"},\"setProfilAndProposal(string,string,string)\":{\"notice\":\"Record profil user and record proposaleach users can be proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arpa3.sol\":\"Arpa3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Arpa3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Arpa3 is Ownable, ReentrancyGuard {\\n    \\n    IERC20 public immutable arpa3Token;\\n   \\n    enum  WorkflowStatus { UserRecording, RecordPrivilege, VoteSessionStart, VoteSessionEnd }\\n    WorkflowStatus public workflowstatus;\\n    uint public counter;\\n    uint public number = 0;\\n    uint public amountpriv = 500000000000000000;\\n    uint public minimumVote = 1;\\n    uint public votingSessionNumber;\\n    uint private winningProposalID;\\n    uint public rewardAmount = 500000000000000000;\\n\\n    struct Privilege{\\n        uint idP;\\n        uint amount;\\n        string description;\\n        uint nbVote;\\n        bool isActive;\\n    }\\n\\n    Privilege[] privilegeArray;\\n    \\n    struct Proposal {\\n        address addresse;\\n        string name;\\n        string firstname;\\n        string service;\\n        uint nbvote;\\n    }\\n\\n    Proposal[] public proposalArray;\\n\\n    struct Profil {\\n        string name;\\n        string firstname;\\n        uint nbVotePrivilege;\\n        bool hasvoted;\\n        bool active;\\n    }\\n\\n    struct Orders {\\n        address winnerAddress;\\n        uint privilegeID;\\n        string descprivi;\\n        uint timestamprivi;\\n        uint amountprivi;\\n        bool consoprivi;\\n    }\\n\\n    Orders[] public ordersArray;\\n\\n    mapping(address => Profil) public users;\\n    mapping(address=>uint) balances;\\n\\n    event AddProfil(address _address, string _name, string _firstname);\\n    event AddPrivilege(address _address, string _description);\\n    event GetWinnerSession(uint _session, address _adresse, uint _nbVote);\\n    event HistoricVote(uint _session, address _adresse, string motivation);\\n    event GetWinnerToken(address _address, uint _amount);\\n    event BuyToken(address _address, uint _amount, uint _indexp);\\n\\n    constructor(address _rewardToken) {\\n        arpa3Token = IERC20(_rewardToken);\\n    }\\n\\n    function addPrivilege(string calldata _description) external payable nonReentrant{\\n        require(users[msg.sender].active == true,\\\"User not recorded\\\");\\n        require(msg.value == amountpriv, \\\"Incorrect amount\\\");\\n        \\n        Privilege memory privilege;\\n        privilege.idP = counter;\\n        privilege.amount = 0;\\n        privilege.description = _description;\\n        privilege.isActive = true;\\n        privilegeArray.push(privilege);\\n\\n        balances[msg.sender] += msg.value;\\n        ++counter;\\n        emit AddPrivilege(msg.sender, _description);\\n    }\\n\\n    function getPrivilege() external view returns(Privilege[] memory){\\n        return privilegeArray;\\n    }\\n\\n    function buyPrivilege(uint _indexp,uint _amount) external {\\n        require(_amount > 0, \\\"Not correct price\\\");\\n        require(arpa3Token.balanceOf(msg.sender) >= _amount,\\\"Not enought funds to buy this privilege\\\");\\n        require(privilegeArray[_indexp].amount == _amount,\\\"Petit malin va ...\\\");\\n\\n        require(arpa3Token.transferFrom(msg.sender,address(this), _amount),\\\"Transfer erreur\\\");\\n\\n        Orders memory orders;\\n        orders.winnerAddress = msg.sender;\\n        orders.privilegeID = _indexp;\\n        orders.descprivi = privilegeArray[_indexp].description;\\n        orders.timestamprivi = block.timestamp;\\n        orders.amountprivi = _amount;\\n        orders.consoprivi = false;\\n        ordersArray.push(orders);\\n        emit BuyToken(msg.sender, _amount, _indexp);\\n    }\\n\\n    function getOrders() external view returns(Orders[] memory){\\n        return ordersArray;\\n    }\\n\\n    function approveArpacoin(uint _amount) external {\\n        arpa3Token.approve(msg.sender, _amount* 10**18);\\n    }\\n\\n    /// @notice Check if user is recorded on chain / Address and Proposal \\n    function isAccountExist(address _address) external view returns(bool){\\n        return users[_address].active;\\n    }\\n\\n    /// @notice Record profil user and record proposal\\n    /// @notice each users can be proposal\\n    function setProfilAndProposal(string calldata _name, string calldata _firstname, string calldata _service) external {\\n        require(msg.sender != address(0), \\\"not connected\\\");\\n        require(!users[msg.sender].active, \\\"Account already Exist\\\");\\n        require( bytes(_name).length > 0 && bytes(_firstname).length > 0 && bytes(_service).length > 0, \\\"Value not empty\\\");\\n        // struct profil\\n        users[msg.sender].name = _name;\\n        users[msg.sender].firstname = _firstname;\\n        users[msg.sender].hasvoted = false;\\n        users[msg.sender].active = true;\\n\\n        // Array Proposal\\n        Proposal memory proposal;\\n        proposal.addresse = msg.sender;\\n        proposal.name = _name;\\n        proposal.firstname = _firstname;\\n        proposal.service = _service;\\n        proposal.nbvote = 0; \\n        proposalArray.push(proposal);\\n\\n        emit AddProfil(msg.sender, _name,  _firstname);\\n    }\\n\\n    function hasVoted() external view returns(bool){\\n        return users[msg.sender].hasvoted;\\n    }\\n\\n    function setVote(uint _id, string calldata _motivation) external {\\n        require(workflowstatus == WorkflowStatus.VoteSessionStart, 'Voting session havent started yet');\\n        require(!users[msg.sender].hasvoted, 'You have already voted');\\n        require(_id < proposalArray.length, 'Proposal not found'); // pas oblig\\u00e9, et pas besoin du >0 car uint\\n\\n        users[msg.sender].hasvoted = true;\\n        proposalArray[_id].nbvote++;\\n\\n        // if this vote has more votes than the winner vote\\n        if(proposalArray[_id].nbvote > proposalArray[winningProposalID].nbvote) {\\n            winningProposalID = _id;\\n        }\\n        ++number;\\n        emit HistoricVote(votingSessionNumber, proposalArray[_id].addresse, _motivation);\\n    }\\n\\n    function getWinner() external view returns(Proposal memory){\\n        require(workflowstatus == WorkflowStatus.VoteSessionEnd,\\\"Session Vote not closed\\\");\\n        return proposalArray[winningProposalID];\\n    }\\n\\n    function getProposal() external view returns(Proposal[] memory){\\n        return proposalArray;\\n    }\\n\\n    function getMyBalanceDep() external view returns(uint){\\n        return balances[msg.sender];\\n    }\\n\\n    function getMyEthBalance() external view returns(uint){\\n        return msg.sender.balance;\\n    }\\n\\n    function _sendToken(address _addresse) private nonReentrant {\\n        require(_addresse != address(0), \\\"not valid account\\\");\\n        require(proposalArray[winningProposalID].addresse == _addresse, \\\"You are not the Winner Session vote\\\");\\n        arpa3Token.transfer(_addresse, rewardAmount);\\n        emit GetWinnerToken(_addresse, rewardAmount);\\n    }\\n\\n    function getArpaTokenBalance() external view returns(uint){\\n        return arpa3Token.balanceOf(msg.sender);\\n    }\\n\\n    function getBalanceSC() external view returns(uint){\\n        return arpa3Token.balanceOf(address(this));\\n    }\\n\\n    /** Admin function to set Dapps */\\n    /// @notice Display the winner and clean data for next session\\n    /// @dev send Token to winner\\n\\n    function addPrivilegePrice(uint _idp,uint _amount) external onlyOwner{\\n        require(_amount > 0,\\\"Bad amount for privilege\\\");\\n        require(_idp >= 0,\\\"Bad privilege identifier\\\");\\n        privilegeArray[_idp].amount = _amount;\\n    }\\n\\n    function moderatePrivilege(uint _idp, bool _status) external onlyOwner {\\n        privilegeArray[_idp].isActive = _status;\\n    }\\n\\n    /// @notice TODO__\\n    /*\\n    function deletePrivilege(uint _idp) external onlyOwner{\\n        require(_idp >= 0, \\\"bad number\\\");\\n\\n    }\\n    */\\n\\n    /// @dev Reinit du compteur de vote en cours pour la session (number)\\n    /// @dev MinimumVote to send token at vote session stop\\n    function stopVoteSession() external onlyOwner{\\n        workflowstatus = WorkflowStatus.VoteSessionEnd;\\n        if( number >= minimumVote ){\\n            _sendToken(proposalArray[winningProposalID].addresse);\\n        } \\n    }\\n\\n    function setRewardAmount(uint _amount) external onlyOwner{\\n        rewardAmount = _amount;\\n    }\\n\\n    function setMinimumVote(uint _amount) external onlyOwner{\\n        minimumVote = _amount;\\n    }\\n\\n    function setWorkflowstatus(WorkflowStatus _step) external onlyOwner{\\n        workflowstatus = _step;\\n    }\\n\\n    function startVoteSession() external onlyOwner{\\n        number = 0;\\n        ++votingSessionNumber;\\n        workflowstatus = WorkflowStatus.VoteSessionStart;\\n        for (uint256 index = 0; index < proposalArray.length; ++index) {\\n            proposalArray[index].nbvote = 0;\\n            users[proposalArray[index].addresse].hasvoted = false;\\n        }\\n    }\\n\\n    function setConsoOrders(uint _index,bool _status) external onlyOwner{\\n        require(_index >= 0 , \\\"Bad settings\\\");\\n        ordersArray[_index].consoprivi = _status;\\n    }\\n\\n    function setAmountPrivilege(uint _amount) external onlyOwner{\\n        require(_amount > 0, \\\"not enough for privilege\\\");\\n        amountpriv = _amount;\\n    }\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x51b8aac3d9f743b1ef711d71c0307cb9da0f5a2e7177870aa07aef85fe7cb42a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPrivilegePrice(uint256,uint256)": {
        "details": "send Token to winner"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stopVoteSession()": {
        "details": "Reinit du compteur de vote en cours pour la session (number)MinimumVote to send token at vote session stop"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPrivilegePrice(uint256,uint256)": {
        "notice": "Display the winner and clean data for next session"
      },
      "isAccountExist(address)": {
        "notice": "Check if user is recorded on chain / Address and Proposal "
      },
      "setProfilAndProposal(string,string,string)": {
        "notice": "Record profil user and record proposaleach users can be proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 297,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "workflowstatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)294"
      },
      {
        "astId": 299,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 302,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "number",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 305,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "amountpriv",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 308,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "minimumVote",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "votingSessionNumber",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 312,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 315,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "rewardAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 330,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "privilegeArray",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Privilege)326_storage)dyn_storage"
      },
      {
        "astId": 345,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "proposalArray",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Proposal)341_storage)dyn_storage"
      },
      {
        "astId": 373,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "ordersArray",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Orders)369_storage)dyn_storage"
      },
      {
        "astId": 378,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "users",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Profil)356_storage)"
      },
      {
        "astId": 382,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Orders)369_storage)dyn_storage": {
        "base": "t_struct(Orders)369_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Orders[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Privilege)326_storage)dyn_storage": {
        "base": "t_struct(Privilege)326_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Privilege[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)341_storage)dyn_storage": {
        "base": "t_struct(Proposal)341_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)294": {
        "encoding": "inplace",
        "label": "enum Arpa3.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Profil)356_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Arpa3.Profil)",
        "numberOfBytes": "32",
        "value": "t_struct(Profil)356_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Orders)369_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Orders",
        "members": [
          {
            "astId": 358,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "winnerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 360,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "privilegeID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 362,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "descprivi",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 364,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "timestamprivi",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 366,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "amountprivi",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 368,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "consoprivi",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Privilege)326_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Privilege",
        "members": [
          {
            "astId": 317,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "idP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 319,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 321,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 323,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbVote",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 325,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Profil)356_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Profil",
        "members": [
          {
            "astId": 347,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 349,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "firstname",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 351,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbVotePrivilege",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "hasvoted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 355,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "active",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)341_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Proposal",
        "members": [
          {
            "astId": 332,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "addresse",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 334,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 336,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "firstname",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 338,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "service",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 340,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbvote",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}