{
  "address": "0x57A00D440741dc6Aa82f43D0bC2B5c01E56433aE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "AddPrivilege",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_firstname",
          "type": "string"
        }
      ],
      "name": "AddProfil",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_indexp",
          "type": "uint256"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_session",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adresse",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nbVote",
          "type": "uint256"
        }
      ],
      "name": "GetWinnerSession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "GetWinnerToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_session",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adresse",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "motivation",
          "type": "string"
        }
      ],
      "name": "HistoricVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "addPrivilege",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addPrivilegePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountpriv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveArpacoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arpa3Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_indexp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyPrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArpaTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceSC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyBalanceDep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "winnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "privilegeID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "descprivi",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamprivi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountprivi",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "consoprivi",
              "type": "bool"
            }
          ],
          "internalType": "struct Arpa3.Orders[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrivilege",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "idP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbVote",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Arpa3.Privilege[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addresse",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "firstname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "service",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbvote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Arpa3.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addresse",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "firstname",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "service",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "nbvote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Arpa3.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAccountExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "moderatePrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ordersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "privilegeID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "descprivi",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamprivi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountprivi",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "consoprivi",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "addresse",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "firstname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "service",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nbvote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setAmountPrivilege",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setConsoOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_firstname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_service",
          "type": "string"
        }
      ],
      "name": "setProfilAndProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_motivation",
          "type": "string"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Arpa3.WorkflowStatus",
          "name": "_step",
          "type": "uint8"
        }
      ],
      "name": "setWorkflowstatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVoteSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopVoteSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "firstname",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nbVotePrivilege",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasvoted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingSessionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowstatus",
      "outputs": [
        {
          "internalType": "enum Arpa3.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x38c5336944127c6a6dd291bc69b4824491cf6c712011e6f885fdbaaa842308fe",
  "receipt": {
    "to": null,
    "from": "0x56f7666571A0F1abD1A8D19C4cd6Fc1b263BeBc2",
    "contractAddress": "0x57A00D440741dc6Aa82f43D0bC2B5c01E56433aE",
    "transactionIndex": 0,
    "gasUsed": "5535706",
    "logsBloom": "0x
    "blockHash": "0x0d92977d573a8c26506aea827ad30fadc81e43ba2dca16b1bd1ce86e10e9a992",
    "transactionHash": "0x38c5336944127c6a6dd291bc69b4824491cf6c712011e6f885fdbaaa842308fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 498,
        "transactionHash": "0x38c5336944127c6a6dd291bc69b4824491cf6c712011e6f885fdbaaa842308fe",
        "address": "0x57A00D440741dc6Aa82f43D0bC2B5c01E56433aE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056f7666571a0f1abd1a8d19c4cd6fc1b263bebc2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0d92977d573a8c26506aea827ad30fadc81e43ba2dca16b1bd1ce86e10e9a992"
      }
    ],
    "blockNumber": 498,
    "cumulativeGasUsed": "5535706",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1C01962ea13c3Ea0E3b6b529D2617485Dc954b17"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab87ccde1fd2e1f2d55da2cd21062257",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"AddPrivilege\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_firstname\",\"type\":\"string\"}],\"name\":\"AddProfil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_indexp\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_session\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adresse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nbVote\",\"type\":\"uint256\"}],\"name\":\"GetWinnerSession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"GetWinnerToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_session\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adresse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"motivation\",\"type\":\"string\"}],\"name\":\"HistoricVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addPrivilege\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPrivilegePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountpriv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveArpacoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arpa3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArpaTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalanceDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"privilegeID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"descprivi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamprivi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountprivi\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"consoprivi\",\"type\":\"bool\"}],\"internalType\":\"struct Arpa3.Orders[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivilege\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbVote\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Arpa3.Privilege[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"internalType\":\"struct Arpa3.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"internalType\":\"struct Arpa3.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAccountExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"moderatePrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"privilegeID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"descprivi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamprivi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountprivi\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"consoprivi\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addresse\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbvote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmountPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setConsoOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_firstname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_service\",\"type\":\"string\"}],\"name\":\"setProfilAndProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_motivation\",\"type\":\"string\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Arpa3.WorkflowStatus\",\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"setWorkflowstatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoteSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVoteSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"firstname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nbVotePrivilege\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasvoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingSessionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowstatus\",\"outputs\":[{\"internalType\":\"enum Arpa3.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPrivilegePrice(uint256,uint256)\":{\"details\":\"send Token to winner\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stopVoteSession()\":{\"details\":\"Reinit du compteur de vote en cours pour la session (number)MinimumVote to send token at vote session stop\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPrivilegePrice(uint256,uint256)\":{\"notice\":\"Display the winner and clean data for next session\"},\"isAccountExist(address)\":{\"notice\":\"Check if user is recorded on chain / Address and Proposal \"},\"setProfilAndProposal(string,string,string)\":{\"notice\":\"Record profil user and record proposaleach users can be proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arpa3.sol\":\"Arpa3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Arpa3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Arpa3 is Ownable, ReentrancyGuard {\\n    \\n    IERC20 public immutable arpa3Token;\\n   \\n    enum  WorkflowStatus { UserRecording, RecordPrivilege, VoteSessionStart, VoteSessionEnd }\\n    WorkflowStatus public workflowstatus;\\n    uint public counter;\\n    uint public number = 0;\\n    uint public amountpriv = 500000000000000000;\\n    uint public minimumVote = 1;\\n    uint public votingSessionNumber;\\n    uint private winningProposalID;\\n    uint public rewardAmount = 500000000000000000;\\n\\n    struct Privilege{\\n        uint idP;\\n        uint amount;\\n        string description;\\n        uint nbVote;\\n        bool isActive;\\n    }\\n\\n    Privilege[] privilegeArray;\\n    \\n    struct Proposal {\\n        address addresse;\\n        string name;\\n        string firstname;\\n        string service;\\n        uint nbvote;\\n    }\\n\\n    Proposal[] public proposalArray;\\n\\n    struct Profil {\\n        string name;\\n        string firstname;\\n        uint nbVotePrivilege;\\n        bool hasvoted;\\n        bool active;\\n    }\\n\\n    struct Orders {\\n        address winnerAddress;\\n        uint privilegeID;\\n        string descprivi;\\n        uint timestamprivi;\\n        uint amountprivi;\\n        bool consoprivi;\\n    }\\n\\n    Orders[] public ordersArray;\\n\\n    mapping(address => Profil) public users;\\n    mapping(address=>uint) balances;\\n\\n    event AddProfil(address _address, string _name, string _firstname);\\n    event AddPrivilege(address _address, string _description);\\n    event GetWinnerSession(uint _session, address _adresse, uint _nbVote);\\n    event HistoricVote(uint _session, address _adresse, string motivation);\\n    event GetWinnerToken(address _address, uint _amount);\\n    event BuyToken(address _address, uint _amount, uint _indexp);\\n\\n    constructor(address _rewardToken) {\\n        arpa3Token = IERC20(_rewardToken);\\n    }\\n\\n    function addPrivilege(string calldata _description) external payable nonReentrant{\\n        require(users[msg.sender].active == true,\\\"User not recorded\\\");\\n        require(msg.value == amountpriv, \\\"Incorrect amount\\\");\\n        \\n        Privilege memory privilege;\\n        privilege.idP = counter;\\n        privilege.amount = 0;\\n        privilege.description = _description;\\n        privilege.isActive = true;\\n        privilegeArray.push(privilege);\\n\\n        balances[msg.sender] += msg.value;\\n        ++counter;\\n        emit AddPrivilege(msg.sender, _description);\\n    }\\n\\n    function getPrivilege() external view returns(Privilege[] memory){\\n        return privilegeArray;\\n    }\\n\\n    function buyPrivilege(uint _indexp,uint _amount) external {\\n        require(_amount > 0, \\\"Not correct price\\\");\\n        require(arpa3Token.balanceOf(msg.sender) >= _amount,\\\"Not enought funds to buy this privilege\\\");\\n        require(privilegeArray[_indexp].amount == _amount,\\\"Petit malin va ...\\\");\\n\\n        require(arpa3Token.transferFrom(msg.sender,address(this), _amount),\\\"Transfer erreur\\\");\\n\\n        Orders memory orders;\\n        orders.winnerAddress = msg.sender;\\n        orders.privilegeID = _indexp;\\n        orders.descprivi = privilegeArray[_indexp].description;\\n        orders.timestamprivi = block.timestamp;\\n        orders.amountprivi = _amount;\\n        orders.consoprivi = false;\\n        ordersArray.push(orders);\\n        emit BuyToken(msg.sender, _amount, _indexp);\\n    }\\n\\n    function getOrders() external view returns(Orders[] memory){\\n        return ordersArray;\\n    }\\n\\n    function approveArpacoin(uint _amount) external {\\n        arpa3Token.approve(msg.sender, _amount* 10**18);\\n    }\\n\\n    /// @notice Check if user is recorded on chain / Address and Proposal \\n    function isAccountExist(address _address) external view returns(bool){\\n        return users[_address].active;\\n    }\\n\\n    /// @notice Record profil user and record proposal\\n    /// @notice each users can be proposal\\n    function setProfilAndProposal(string calldata _name, string calldata _firstname, string calldata _service) external {\\n        require(msg.sender != address(0), \\\"not connected\\\");\\n        require(!users[msg.sender].active, \\\"Account already Exist\\\");\\n        require( bytes(_name).length > 0 && bytes(_firstname).length > 0 && bytes(_service).length > 0, \\\"Value not empty\\\");\\n        // struct profil\\n        users[msg.sender].name = _name;\\n        users[msg.sender].firstname = _firstname;\\n        users[msg.sender].hasvoted = false;\\n        users[msg.sender].active = true;\\n\\n        // Array Proposal\\n        Proposal memory proposal;\\n        proposal.addresse = msg.sender;\\n        proposal.name = _name;\\n        proposal.firstname = _firstname;\\n        proposal.service = _service;\\n        proposal.nbvote = 0; \\n        proposalArray.push(proposal);\\n\\n        emit AddProfil(msg.sender, _name,  _firstname);\\n    }\\n\\n    function hasVoted() external view returns(bool){\\n        return users[msg.sender].hasvoted;\\n    }\\n\\n    function setVote(uint _id, string calldata _motivation) external {\\n        require(workflowstatus == WorkflowStatus.VoteSessionStart, 'Voting session havent started yet');\\n        require(!users[msg.sender].hasvoted, 'You have already voted');\\n        require(_id < proposalArray.length, 'Proposal not found'); // pas oblig\\u00e9, et pas besoin du >0 car uint\\n\\n        users[msg.sender].hasvoted = true;\\n        proposalArray[_id].nbvote++;\\n\\n        // if this vote has more votes than the winner vote\\n        if(proposalArray[_id].nbvote > proposalArray[winningProposalID].nbvote) {\\n            winningProposalID = _id;\\n        }\\n        ++number;\\n        emit HistoricVote(votingSessionNumber, proposalArray[_id].addresse, _motivation);\\n    }\\n\\n    function getWinner() external view returns(Proposal memory){\\n        require(workflowstatus == WorkflowStatus.VoteSessionEnd,\\\"Session Vote not closed\\\");\\n        return proposalArray[winningProposalID];\\n    }\\n\\n    function getProposal() external view returns(Proposal[] memory){\\n        return proposalArray;\\n    }\\n\\n    function getMyBalanceDep() external view returns(uint){\\n        return balances[msg.sender];\\n    }\\n\\n    function getMyEthBalance() external view returns(uint){\\n        return msg.sender.balance;\\n    }\\n\\n    function _sendToken(address _addresse) private nonReentrant {\\n        require(_addresse != address(0), \\\"not valid account\\\");\\n        require(proposalArray[winningProposalID].addresse == _addresse, \\\"You are not the Winner Session vote\\\");\\n        arpa3Token.transfer(_addresse, rewardAmount);\\n        emit GetWinnerToken(_addresse, rewardAmount);\\n    }\\n\\n    function getArpaTokenBalance() external view returns(uint){\\n        return arpa3Token.balanceOf(msg.sender);\\n    }\\n\\n    function getBalanceSC() external view returns(uint){\\n        return arpa3Token.balanceOf(address(this));\\n    }\\n\\n    /** Admin function to set Dapps */\\n    /// @notice Display the winner and clean data for next session\\n    /// @dev send Token to winner\\n\\n    function addPrivilegePrice(uint _idp,uint _amount) external onlyOwner{\\n        require(_amount > 0,\\\"Bad amount for privilege\\\");\\n        require(_idp >= 0,\\\"Bad privilege identifier\\\");\\n        privilegeArray[_idp].amount = _amount;\\n    }\\n\\n    function moderatePrivilege(uint _idp, bool _status) external onlyOwner {\\n        privilegeArray[_idp].isActive = _status;\\n    }\\n\\n    /// @notice TODO__\\n    /*\\n    function deletePrivilege(uint _idp) external onlyOwner{\\n        require(_idp >= 0, \\\"bad number\\\");\\n\\n    }\\n    */\\n\\n    /// @dev Reinit du compteur de vote en cours pour la session (number)\\n    /// @dev MinimumVote to send token at vote session stop\\n    function stopVoteSession() external onlyOwner{\\n        workflowstatus = WorkflowStatus.VoteSessionEnd;\\n        if( number >= minimumVote ){\\n            _sendToken(proposalArray[winningProposalID].addresse);\\n        } \\n    }\\n\\n    function setRewardAmount(uint _amount) external onlyOwner{\\n        rewardAmount = _amount;\\n    }\\n\\n    function setMinimumVote(uint _amount) external onlyOwner{\\n        minimumVote = _amount;\\n    }\\n\\n    function setWorkflowstatus(WorkflowStatus _step) external onlyOwner{\\n        workflowstatus = _step;\\n    }\\n\\n    function startVoteSession() external onlyOwner{\\n        number = 0;\\n        ++votingSessionNumber;\\n        workflowstatus = WorkflowStatus.VoteSessionStart;\\n        for (uint256 index = 0; index < proposalArray.length; ++index) {\\n            proposalArray[index].nbvote = 0;\\n            users[proposalArray[index].addresse].hasvoted = false;\\n        }\\n    }\\n\\n    function setConsoOrders(uint _index,bool _status) external onlyOwner{\\n        require(_index >= 0 , \\\"Bad settings\\\");\\n        ordersArray[_index].consoprivi = _status;\\n    }\\n\\n    function setAmountPrivilege(uint _amount) external onlyOwner{\\n        require(_amount > 0, \\\"not enough for privilege\\\");\\n        amountpriv = _amount;\\n    }\\n\\n    function withdrawal() external payable onlyOwner {\\n        require(address(this).balance > 0, \\\"No cash in SmartContract\\\");\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n    \\n    fallback() external payable {}\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x9cd3057c3e7487f9b5d07bde4118aa24ded61a04824506d897f5bd47417754c6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c80638da5cb5b1161012e578063b47e9d40116100ab578063f2fde38b1161006f578063f2fde38b146107cc578063f3b3cb6a146107f5578063f5ad31751461081e578063f7b2a7be14610847578063ffdf7cb1146108725761023b565b8063b47e9d401461072e578063b9e2bea014610745578063c366c56c14610770578063c6abda3c14610799578063d4e93292146107c25761023b565b8063a87430ba116100f2578063a87430ba14610640578063a8a65a7814610681578063a96c879e146106aa578063aaa98346146106ec578063b32c9356146107035761023b565b80638da5cb5b1461056b5780638e7ea5b2146105965780639867a103146105c15780639b169595146105ec578063a730bfaf146106175761023b565b80633db42de7116101bc578063648213381161018057806364821338146104aa578063715018a6146104d5578063771f7805146104ec5780637f47997e146105155780638381f58a146105405761023b565b80633db42de7146103d757806342e3cf1e1461040057806358e7a5991461042b57806361bc221a14610456578063634c2d77146104815761023b565b80632d033284116102035780632d033284146102fb5780632e2dc43e146103265780633a19825d146103515780633cfdf802146103925780633d665f45146103ae5761023b565b80630709dec81461023d57806314b4a4f9146102685780631dbe22be146102a55780631f21580d146102d05761023b565b3661023b57005b005b34801561024957600080fd5b5061025261089b565b60405161025f919061316d565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a91906131f0565b6108ba565b60405161029c9190613238565b60405180910390f35b3480156102b157600080fd5b506102ba610913565b6040516102c79190613439565b60405180910390f35b3480156102dc57600080fd5b506102e5610a3d565b6040516102f2919061316d565b60405180910390f35b34801561030757600080fd5b50610310610ade565b60405161031d919061316d565b60405180910390f35b34801561033257600080fd5b5061033b610ae4565b60405161034891906135b5565b60405180910390f35b34801561035d57600080fd5b5061037860048036038101906103739190613603565b610c64565b604051610389959493929190613689565b60405180910390f35b6103ac60048036038101906103a79190613756565b610e62565b005b3480156103ba57600080fd5b506103d560048036038101906103d09190613603565b6110f7565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190613603565b61114c565b005b34801561040c57600080fd5b50610415611201565b604051610422919061316d565b60405180910390f35b34801561043757600080fd5b50610440611248565b60405161044d919061381a565b60405180910390f35b34801561046257600080fd5b5061046b61125b565b604051610478919061316d565b60405180910390f35b34801561048d57600080fd5b506104a860048036038101906104a39190613603565b611261565b005b3480156104b657600080fd5b506104bf611273565b6040516104cc9190613238565b60405180910390f35b3480156104e157600080fd5b506104ea6112ca565b005b3480156104f857600080fd5b50610513600480360381019061050e9190613861565b6112de565b005b34801561052157600080fd5b5061052a61136b565b604051610537919061316d565b60405180910390f35b34801561054c57600080fd5b50610555611371565b604051610562919061316d565b60405180910390f35b34801561057757600080fd5b50610580611377565b60405161058d91906138a1565b60405180910390f35b3480156105a257600080fd5b506105ab6113a0565b6040516105b89190613940565b60405180910390f35b3480156105cd57600080fd5b506105d6611667565b6040516105e391906139c1565b60405180910390f35b3480156105f857600080fd5b5061060161168b565b60405161060e919061316d565b60405180910390f35b34801561062357600080fd5b5061063e600480360381019061063991906139dc565b611691565b005b34801561064c57600080fd5b50610667600480360381019061066291906131f0565b61174e565b604051610678959493929190613a1c565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190613603565b6118ae565b005b3480156106b657600080fd5b506106d160048036038101906106cc9190613603565b6118c0565b6040516106e396959493929190613a7d565b60405180910390f35b3480156106f857600080fd5b506107016119c1565b005b34801561070f57600080fd5b50610718611b00565b604051610725919061316d565b60405180910390f35b34801561073a57600080fd5b50610743611ba1565b005b34801561075157600080fd5b5061075a611c32565b6040516107679190613c2b565b60405180910390f35b34801561077c57600080fd5b5061079760048036038101906107929190613c4d565b611ea7565b005b3480156107a557600080fd5b506107c060048036038101906107bb9190613cd2565b612185565b005b6107ca6121ba565b005b3480156107d857600080fd5b506107f360048036038101906107ee91906131f0565b61227e565b005b34801561080157600080fd5b5061081c60048036038101906108179190613861565b612301565b005b34801561082a57600080fd5b50610845600480360381019061084091906139dc565b61234a565b005b34801561085357600080fd5b5061085c6127dd565b604051610869919061316d565b60405180910390f35b34801561087e57600080fd5b5061089960048036038101906108949190613cff565b6127e3565b005b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160019054906101000a900460ff169050919050565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015610a3457838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201805461097e90613de2565b80601f01602080910402602001604051908101604052809291908181526020018280546109aa90613de2565b80156109f75780601f106109cc576101008083540402835291602001916109f7565b820191906000526020600020905b8154815290600101906020018083116109da57829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff16151515158152505081526020019060010190610937565b50505050905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a9891906138a1565b602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190613e28565b905090565b60055481565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610c5b57838290600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054610b9b90613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc790613de2565b8015610c145780601f10610be957610100808354040283529160200191610c14565b820191906000526020600020905b815481529060010190602001808311610bf757829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152505081526020019060010190610b08565b50505050905090565b600b8181548110610c7457600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610cbd90613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990613de2565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b505050505090806002018054610d4b90613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790613de2565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b505050505090806003018054610dd990613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0590613de2565b8015610e525780601f10610e2757610100808354040283529160200191610e52565b820191906000526020600020905b815481529060010190602001808311610e3557829003601f168201915b5050505050908060040154905085565b610e6a612cdb565b60011515600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160019054906101000a900460ff16151514610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790613ea1565b60405180910390fd5b6005543414610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b90613f0d565b60405180910390fd5b610f4c613090565b600354816000018181525050600081602001818152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081604001819052506001816080019015159081151581525050600a8190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010155604082015181600201908161101691906140fe565b506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550505034600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461109291906141ff565b925050819055506003600081546110a890614233565b919050819055507f79b4967f952c2e2a563ed6ece6722a54e83844ba5ab08f9f5cdaaf27560125de3384846040516110e2939291906142b7565b60405180910390a1506110f3612d2a565b5050565b6110ff612d33565b60008111611142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113990614335565b60405180910390fd5b8060058190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b333670de0b6b3a76400008461119d9190614355565b6040518363ffffffff1660e01b81526004016111ba929190614397565b6020604051808303816000875af11580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd91906143d5565b5050565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600260009054906101000a900460ff1681565b60035481565b611269612d33565b8060068190555050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16905090565b6112d2612d33565b6112dc6000612db1565b565b6112e6612d33565b600082101561132a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113219061444e565b60405180910390fd5b80600c838154811061133f5761133e61446e565b5b906000526020600020906006020160050160006101000a81548160ff0219169083151502179055505050565b60075481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113a86130c1565b6003808111156113bb576113ba6137a3565b5b600260009054906101000a900460ff1660038111156113dd576113dc6137a3565b5b1461141d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611414906144e9565b60405180910390fd5b600b600854815481106114335761143261446e565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546114b290613de2565b80601f01602080910402602001604051908101604052809291908181526020018280546114de90613de2565b801561152b5780601f106115005761010080835404028352916020019161152b565b820191906000526020600020905b81548152906001019060200180831161150e57829003601f168201915b5050505050815260200160028201805461154490613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461157090613de2565b80156115bd5780601f10611592576101008083540402835291602001916115bd565b820191906000526020600020905b8154815290600101906020018083116115a057829003601f168201915b505050505081526020016003820180546115d690613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461160290613de2565b801561164f5780601f106116245761010080835404028352916020019161164f565b820191906000526020600020905b81548152906001019060200180831161163257829003601f168201915b50505050508152602001600482015481525050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065481565b611699612d33565b600081116116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390614555565b60405180910390fd5b6000821015611720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611717906145c1565b60405180910390fd5b80600a83815481106117355761173461446e565b5b9060005260206000209060050201600101819055505050565b600d60205280600052604060002060009150905080600001805461177190613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461179d90613de2565b80156117ea5780601f106117bf576101008083540402835291602001916117ea565b820191906000526020600020905b8154815290600101906020018083116117cd57829003601f168201915b5050505050908060010180546117ff90613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461182b90613de2565b80156118785780601f1061184d57610100808354040283529160200191611878565b820191906000526020600020905b81548152906001019060200180831161185b57829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b6118b6612d33565b8060098190555050565b600c81815481106118d057600080fd5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461191f90613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461194b90613de2565b80156119985780601f1061196d57610100808354040283529160200191611998565b820191906000526020600020905b81548152906001019060200180831161197b57829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900460ff16905086565b6119c9612d33565b60006004819055506007600081546119e090614233565b9190508190555060028060006101000a81548160ff02191690836003811115611a0c57611a0b6137a3565b5b021790555060005b600b80549050811015611afd576000600b8281548110611a3757611a3661446e565b5b9060005260206000209060050201600401819055506000600d6000600b8481548110611a6657611a6561446e565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff02191690831515021790555080611af690614233565b9050611a14565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b5b91906138a1565b602060405180830381865afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190613e28565b905090565b611ba9612d33565b6003600260006101000a81548160ff02191690836003811115611bcf57611bce6137a3565b5b021790555060065460045410611c3057611c2f600b60085481548110611bf857611bf761446e565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612e75565b5b565b6060600b805480602002602001604051908101604052809291908181526020016000905b82821015611e9e57838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611cdf90613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0b90613de2565b8015611d585780601f10611d2d57610100808354040283529160200191611d58565b820191906000526020600020905b815481529060010190602001808311611d3b57829003601f168201915b50505050508152602001600282018054611d7190613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9d90613de2565b8015611dea5780601f10611dbf57610100808354040283529160200191611dea565b820191906000526020600020905b815481529060010190602001808311611dcd57829003601f168201915b50505050508152602001600382018054611e0390613de2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2f90613de2565b8015611e7c5780601f10611e5157610100808354040283529160200191611e7c565b820191906000526020600020905b815481529060010190602001808311611e5f57829003601f168201915b5050505050815260200160048201548152505081526020019060010190611c56565b50505050905090565b60026003811115611ebb57611eba6137a3565b5b600260009054906101000a900460ff166003811115611edd57611edc6137a3565b5b14611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1490614653565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa4906146bf565b60405180910390fd5b600b805490508310611ff4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611feb9061472b565b60405180910390fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600b83815481106120635761206261446e565b5b9060005260206000209060050201600401600081548092919061208590614233565b9190505550600b600854815481106120a05761209f61446e565b5b906000526020600020906005020160040154600b84815481106120c6576120c561446e565b5b90600052602060002090600502016004015411156120e657826008819055505b6004600081546120f590614233565b919050819055507f9a4b1974a303b6b8937c2f2186a95dc8466a1b5f12f3908d04c7e4afc0079bd9600754600b85815481106121345761213361446e565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484604051612178949392919061474b565b60405180910390a1505050565b61218d612d33565b80600260006101000a81548160ff021916908360038111156121b2576121b16137a3565b5b021790555050565b6121c2612d33565b60004711612205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fc906147d7565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161222b90614828565b60006040518083038185875af1925050503d8060008114612268576040519150601f19603f3d011682016040523d82523d6000602084013e61226d565b606091505b505090508061227b57600080fd5b50565b612286612d33565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036122f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ec906148af565b60405180910390fd5b6122fe81612db1565b50565b612309612d33565b80600a838154811061231e5761231d61446e565b5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055505050565b6000811161238d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123849061491b565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016123e791906138a1565b602060405180830381865afa158015612404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124289190613e28565b1015612469576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612460906149ad565b60405180910390fd5b80600a838154811061247e5761247d61446e565b5b906000526020600020906005020160010154146124d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c790614a19565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161252d93929190614a39565b6020604051808303816000875af115801561254c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257091906143d5565b6125af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a690614abc565b60405180910390fd5b6125b7613106565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816020018181525050600a838154811061260d5761260c61446e565b5b9060005260206000209060050201600201805461262990613de2565b80601f016020809104026020016040519081016040528092919081815260200182805461265590613de2565b80156126a25780601f10612677576101008083540402835291602001916126a2565b820191906000526020600020905b81548152906001019060200180831161268557829003601f168201915b50505050508160400181905250428160600181815250508181608001818152505060008160a0019015159081151581525050600c81908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201908161276691906140fe565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555050507ff6f342132c7de5e5a1e99c8efae544c94731f3ff093f5c3c97c6973d9415cdfb3383856040516127d093929190614adc565b60405180910390a1505050565b60095481565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603612852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284990614b5f565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160019054906101000a900460ff16156128e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d990614bcb565b60405180910390fd5b6000868690501180156128f85750600084849050115b80156129075750600082829050115b612946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293d90614c37565b60405180910390fd5b8585600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019182612997929190614c62565b508383600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010191826129e9929190614c62565b506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055506001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160016101000a81548160ff021916908315150217905550612aa86130c1565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081606001819052506000816080018181525050600b81908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081612c5a91906140fe565b506040820151816002019081612c7091906140fe565b506060820151816003019081612c8691906140fe565b506080820151816004015550507fdb662c8b79ccb9909891c358aec9651e782d0ad9523566bd659c084b5fefcec73388888888604051612cca959493929190614d32565b60405180910390a150505050505050565b600260015403612d20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1790614dc7565b60405180910390fd5b6002600181905550565b60018081905550565b612d3b613088565b73ffffffffffffffffffffffffffffffffffffffff16612d59611377565b73ffffffffffffffffffffffffffffffffffffffff1614612daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da690614e33565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e7d612cdb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee390614e9f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600b60085481548110612f1957612f1861446e565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f9890614f31565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826009546040518363ffffffff1660e01b8152600401612ffe929190614397565b6020604051808303816000875af115801561301d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304191906143d5565b507f2e06e81581e774f145d32b1feac204fb2683499d425091cb4fcfc137726008c281600954604051613075929190614397565b60405180910390a1613085612d2a565b50565b600033905090565b6040518060a00160405280600081526020016000815260200160608152602001600081526020016000151581525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600081525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016060815260200160008152602001600081526020016000151581525090565b6000819050919050565b61316781613154565b82525050565b6000602082019050613182600083018461315e565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131bd82613192565b9050919050565b6131cd816131b2565b81146131d857600080fd5b50565b6000813590506131ea816131c4565b92915050565b60006020828403121561320657613205613188565b5b6000613214848285016131db565b91505092915050565b60008115159050919050565b6132328161321d565b82525050565b600060208201905061324d6000830184613229565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61328881613154565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132c85780820151818401526020810190506132ad565b60008484015250505050565b6000601f19601f8301169050919050565b60006132f08261328e565b6132fa8185613299565b935061330a8185602086016132aa565b613313816132d4565b840191505092915050565b6133278161321d565b82525050565b600060a083016000830151613345600086018261327f565b506020830151613358602086018261327f565b506040830151848203604086015261337082826132e5565b9150506060830151613385606086018261327f565b506080830151613398608086018261331e565b508091505092915050565b60006133af838361332d565b905092915050565b6000602082019050919050565b60006133cf82613253565b6133d9818561325e565b9350836020820285016133eb8561326f565b8060005b85811015613427578484038952815161340885826133a3565b9450613413836133b7565b925060208a019950506001810190506133ef565b50829750879550505050505092915050565b6000602082019050818103600083015261345381846133c4565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613490816131b2565b82525050565b600060c0830160008301516134ae6000860182613487565b5060208301516134c1602086018261327f565b50604083015184820360408601526134d982826132e5565b91505060608301516134ee606086018261327f565b506080830151613501608086018261327f565b5060a083015161351460a086018261331e565b508091505092915050565b600061352b8383613496565b905092915050565b6000602082019050919050565b600061354b8261345b565b6135558185613466565b93508360208202850161356785613477565b8060005b858110156135a35784840389528151613584858261351f565b945061358f83613533565b925060208a0199505060018101905061356b565b50829750879550505050505092915050565b600060208201905081810360008301526135cf8184613540565b905092915050565b6135e081613154565b81146135eb57600080fd5b50565b6000813590506135fd816135d7565b92915050565b60006020828403121561361957613618613188565b5b6000613627848285016135ee565b91505092915050565b613639816131b2565b82525050565b600082825260208201905092915050565b600061365b8261328e565b613665818561363f565b93506136758185602086016132aa565b61367e816132d4565b840191505092915050565b600060a08201905061369e6000830188613630565b81810360208301526136b08187613650565b905081810360408301526136c48186613650565b905081810360608301526136d88185613650565b90506136e7608083018461315e565b9695505050505050565b600080fd5b600080fd5b600080fd5b60008083601f840112613716576137156136f1565b5b8235905067ffffffffffffffff811115613733576137326136f6565b5b60208301915083600182028301111561374f5761374e6136fb565b5b9250929050565b6000806020838503121561376d5761376c613188565b5b600083013567ffffffffffffffff81111561378b5761378a61318d565b5b61379785828601613700565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106137e3576137e26137a3565b5b50565b60008190506137f4826137d2565b919050565b6000613804826137e6565b9050919050565b613814816137f9565b82525050565b600060208201905061382f600083018461380b565b92915050565b61383e8161321d565b811461384957600080fd5b50565b60008135905061385b81613835565b92915050565b6000806040838503121561387857613877613188565b5b6000613886858286016135ee565b92505060206138978582860161384c565b9150509250929050565b60006020820190506138b66000830184613630565b92915050565b600060a0830160008301516138d46000860182613487565b50602083015184820360208601526138ec82826132e5565b9150506040830151848203604086015261390682826132e5565b9150506060830151848203606086015261392082826132e5565b9150506080830151613935608086018261327f565b508091505092915050565b6000602082019050818103600083015261395a81846138bc565b905092915050565b6000819050919050565b600061398761398261397d84613192565b613962565b613192565b9050919050565b60006139998261396c565b9050919050565b60006139ab8261398e565b9050919050565b6139bb816139a0565b82525050565b60006020820190506139d660008301846139b2565b92915050565b600080604083850312156139f3576139f2613188565b5b6000613a01858286016135ee565b9250506020613a12858286016135ee565b9150509250929050565b600060a0820190508181036000830152613a368188613650565b90508181036020830152613a4a8187613650565b9050613a59604083018661315e565b613a666060830185613229565b613a736080830184613229565b9695505050505050565b600060c082019050613a926000830189613630565b613a9f602083018861315e565b8181036040830152613ab18187613650565b9050613ac0606083018661315e565b613acd608083018561315e565b613ada60a0830184613229565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a083016000830151613b296000860182613487565b5060208301518482036020860152613b4182826132e5565b91505060408301518482036040860152613b5b82826132e5565b91505060608301518482036060860152613b7582826132e5565b9150506080830151613b8a608086018261327f565b508091505092915050565b6000613ba18383613b11565b905092915050565b6000602082019050919050565b6000613bc182613ae5565b613bcb8185613af0565b935083602082028501613bdd85613b01565b8060005b85811015613c195784840389528151613bfa8582613b95565b9450613c0583613ba9565b925060208a01995050600181019050613be1565b50829750879550505050505092915050565b60006020820190508181036000830152613c458184613bb6565b905092915050565b600080600060408486031215613c6657613c65613188565b5b6000613c74868287016135ee565b935050602084013567ffffffffffffffff811115613c9557613c9461318d565b5b613ca186828701613700565b92509250509250925092565b60048110613cba57600080fd5b50565b600081359050613ccc81613cad565b92915050565b600060208284031215613ce857613ce7613188565b5b6000613cf684828501613cbd565b91505092915050565b60008060008060008060608789031215613d1c57613d1b613188565b5b600087013567ffffffffffffffff811115613d3a57613d3961318d565b5b613d4689828a01613700565b9650965050602087013567ffffffffffffffff811115613d6957613d6861318d565b5b613d7589828a01613700565b9450945050604087013567ffffffffffffffff811115613d9857613d9761318d565b5b613da489828a01613700565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613dfa57607f821691505b602082108103613e0d57613e0c613db3565b5b50919050565b600081519050613e22816135d7565b92915050565b600060208284031215613e3e57613e3d613188565b5b6000613e4c84828501613e13565b91505092915050565b7f55736572206e6f74207265636f72646564000000000000000000000000000000600082015250565b6000613e8b60118361363f565b9150613e9682613e55565b602082019050919050565b60006020820190508181036000830152613eba81613e7e565b9050919050565b7f496e636f727265637420616d6f756e7400000000000000000000000000000000600082015250565b6000613ef760108361363f565b9150613f0282613ec1565b602082019050919050565b60006020820190508181036000830152613f2681613eea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613fbe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f81565b613fc88683613f81565b95508019841693508086168417925050509392505050565b6000613ffb613ff6613ff184613154565b613962565b613154565b9050919050565b6000819050919050565b61401583613fe0565b61402961402182614002565b848454613f8e565b825550505050565b600090565b61403e614031565b61404981848461400c565b505050565b5b8181101561406d57614062600082614036565b60018101905061404f565b5050565b601f8211156140b25761408381613f5c565b61408c84613f71565b8101602085101561409b578190505b6140af6140a785613f71565b83018261404e565b50505b505050565b600082821c905092915050565b60006140d5600019846008026140b7565b1980831691505092915050565b60006140ee83836140c4565b9150826002028217905092915050565b6141078261328e565b67ffffffffffffffff8111156141205761411f613f2d565b5b61412a8254613de2565b614135828285614071565b600060209050601f8311600181146141685760008415614156578287015190505b61416085826140e2565b8655506141c8565b601f19841661417686613f5c565b60005b8281101561419e57848901518255600182019150602085019450602081019050614179565b868310156141bb57848901516141b7601f8916826140c4565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061420a82613154565b915061421583613154565b925082820190508082111561422d5761422c6141d0565b5b92915050565b600061423e82613154565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036142705761426f6141d0565b5b600182019050919050565b82818337600083830152505050565b6000614296838561363f565b93506142a383858461427b565b6142ac836132d4565b840190509392505050565b60006040820190506142cc6000830186613630565b81810360208301526142df81848661428a565b9050949350505050565b7f6e6f7420656e6f75676820666f722070726976696c6567650000000000000000600082015250565b600061431f60188361363f565b915061432a826142e9565b602082019050919050565b6000602082019050818103600083015261434e81614312565b9050919050565b600061436082613154565b915061436b83613154565b925082820261437981613154565b915082820484148315176143905761438f6141d0565b5b5092915050565b60006040820190506143ac6000830185613630565b6143b9602083018461315e565b9392505050565b6000815190506143cf81613835565b92915050565b6000602082840312156143eb576143ea613188565b5b60006143f9848285016143c0565b91505092915050565b7f4261642073657474696e67730000000000000000000000000000000000000000600082015250565b6000614438600c8361363f565b915061444382614402565b602082019050919050565b600060208201905081810360008301526144678161442b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f53657373696f6e20566f7465206e6f7420636c6f736564000000000000000000600082015250565b60006144d360178361363f565b91506144de8261449d565b602082019050919050565b60006020820190508181036000830152614502816144c6565b9050919050565b7f42616420616d6f756e7420666f722070726976696c6567650000000000000000600082015250565b600061453f60188361363f565b915061454a82614509565b602082019050919050565b6000602082019050818103600083015261456e81614532565b9050919050565b7f4261642070726976696c656765206964656e7469666965720000000000000000600082015250565b60006145ab60188361363f565b91506145b682614575565b602082019050919050565b600060208201905081810360008301526145da8161459e565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061463d60218361363f565b9150614648826145e1565b604082019050919050565b6000602082019050818103600083015261466c81614630565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b60006146a960168361363f565b91506146b482614673565b602082019050919050565b600060208201905081810360008301526146d88161469c565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b600061471560128361363f565b9150614720826146df565b602082019050919050565b6000602082019050818103600083015261474481614708565b9050919050565b6000606082019050614760600083018761315e565b61476d6020830186613630565b818103604083015261478081848661428a565b905095945050505050565b7f4e6f206361736820696e20536d617274436f6e74726163740000000000000000600082015250565b60006147c160188361363f565b91506147cc8261478b565b602082019050919050565b600060208201905081810360008301526147f0816147b4565b9050919050565b600081905092915050565b50565b60006148126000836147f7565b915061481d82614802565b600082019050919050565b600061483382614805565b9150819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061489960268361363f565b91506148a48261483d565b604082019050919050565b600060208201905081810360008301526148c88161488c565b9050919050565b7f4e6f7420636f7272656374207072696365000000000000000000000000000000600082015250565b600061490560118361363f565b9150614910826148cf565b602082019050919050565b60006020820190508181036000830152614934816148f8565b9050919050565b7f4e6f7420656e6f756768742066756e647320746f20627579207468697320707260008201527f6976696c65676500000000000000000000000000000000000000000000000000602082015250565b600061499760278361363f565b91506149a28261493b565b604082019050919050565b600060208201905081810360008301526149c68161498a565b9050919050565b7f5065746974206d616c696e207661202e2e2e0000000000000000000000000000600082015250565b6000614a0360128361363f565b9150614a0e826149cd565b602082019050919050565b60006020820190508181036000830152614a32816149f6565b9050919050565b6000606082019050614a4e6000830186613630565b614a5b6020830185613630565b614a68604083018461315e565b949350505050565b7f5472616e73666572206572726575720000000000000000000000000000000000600082015250565b6000614aa6600f8361363f565b9150614ab182614a70565b602082019050919050565b60006020820190508181036000830152614ad581614a99565b9050919050565b6000606082019050614af16000830186613630565b614afe602083018561315e565b614b0b604083018461315e565b949350505050565b7f6e6f7420636f6e6e656374656400000000000000000000000000000000000000600082015250565b6000614b49600d8361363f565b9150614b5482614b13565b602082019050919050565b60006020820190508181036000830152614b7881614b3c565b9050919050565b7f4163636f756e7420616c72656164792045786973740000000000000000000000600082015250565b6000614bb560158361363f565b9150614bc082614b7f565b602082019050919050565b60006020820190508181036000830152614be481614ba8565b9050919050565b7f56616c7565206e6f7420656d7074790000000000000000000000000000000000600082015250565b6000614c21600f8361363f565b9150614c2c82614beb565b602082019050919050565b60006020820190508181036000830152614c5081614c14565b9050919050565b600082905092915050565b614c6c8383614c57565b67ffffffffffffffff811115614c8557614c84613f2d565b5b614c8f8254613de2565b614c9a828285614071565b6000601f831160018114614cc95760008415614cb7578287013590505b614cc185826140e2565b865550614d29565b601f198416614cd786613f5c565b60005b82811015614cff57848901358255600182019150602085019450602081019050614cda565b86831015614d1c5784890135614d18601f8916826140c4565b8355505b6001600288020188555050505b50505050505050565b6000606082019050614d476000830188613630565b8181036020830152614d5a81868861428a565b90508181036040830152614d6f81848661428a565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614db1601f8361363f565b9150614dbc82614d7b565b602082019050919050565b60006020820190508181036000830152614de081614da4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614e1d60208361363f565b9150614e2882614de7565b602082019050919050565b60006020820190508181036000830152614e4c81614e10565b9050919050565b7f6e6f742076616c6964206163636f756e74000000000000000000000000000000600082015250565b6000614e8960118361363f565b9150614e9482614e53565b602082019050919050565b60006020820190508181036000830152614eb881614e7c565b9050919050565b7f596f7520617265206e6f74207468652057696e6e65722053657373696f6e207660008201527f6f74650000000000000000000000000000000000000000000000000000000000602082015250565b6000614f1b60238361363f565b9150614f2682614ebf565b604082019050919050565b60006020820190508181036000830152614f4a81614f0e565b905091905056fea2646970667358221220c6eb03e06379e38e2bc3cb003fbc2c3fcddfd731db4b6348bb6c4692e517375f64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPrivilegePrice(uint256,uint256)": {
        "details": "send Token to winner"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stopVoteSession()": {
        "details": "Reinit du compteur de vote en cours pour la session (number)MinimumVote to send token at vote session stop"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPrivilegePrice(uint256,uint256)": {
        "notice": "Display the winner and clean data for next session"
      },
      "isAccountExist(address)": {
        "notice": "Check if user is recorded on chain / Address and Proposal "
      },
      "setProfilAndProposal(string,string,string)": {
        "notice": "Record profil user and record proposaleach users can be proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 909,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "workflowstatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)906"
      },
      {
        "astId": 911,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "number",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 917,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "amountpriv",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 920,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "minimumVote",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 922,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "votingSessionNumber",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 924,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 927,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "rewardAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 942,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "privilegeArray",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Privilege)938_storage)dyn_storage"
      },
      {
        "astId": 957,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "proposalArray",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Proposal)953_storage)dyn_storage"
      },
      {
        "astId": 985,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "ordersArray",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Orders)981_storage)dyn_storage"
      },
      {
        "astId": 990,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "users",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Profil)968_storage)"
      },
      {
        "astId": 994,
        "contract": "contracts/Arpa3.sol:Arpa3",
        "label": "balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Orders)981_storage)dyn_storage": {
        "base": "t_struct(Orders)981_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Orders[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Privilege)938_storage)dyn_storage": {
        "base": "t_struct(Privilege)938_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Privilege[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)953_storage)dyn_storage": {
        "base": "t_struct(Proposal)953_storage",
        "encoding": "dynamic_array",
        "label": "struct Arpa3.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)906": {
        "encoding": "inplace",
        "label": "enum Arpa3.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Profil)968_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Arpa3.Profil)",
        "numberOfBytes": "32",
        "value": "t_struct(Profil)968_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Orders)981_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Orders",
        "members": [
          {
            "astId": 970,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "winnerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 972,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "privilegeID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 974,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "descprivi",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 976,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "timestamprivi",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 978,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "amountprivi",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 980,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "consoprivi",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Privilege)938_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Privilege",
        "members": [
          {
            "astId": 929,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "idP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 931,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 933,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 935,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbVote",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 937,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Profil)968_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Profil",
        "members": [
          {
            "astId": 959,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 961,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "firstname",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 963,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbVotePrivilege",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 965,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "hasvoted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 967,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "active",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)953_storage": {
        "encoding": "inplace",
        "label": "struct Arpa3.Proposal",
        "members": [
          {
            "astId": 944,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "addresse",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 946,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 948,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "firstname",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 950,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "service",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 952,
            "contract": "contracts/Arpa3.sol:Arpa3",
            "label": "nbvote",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}